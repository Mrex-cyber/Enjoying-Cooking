{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CookingService {\n  constructor(http) {\n    this.http = http;\n    this.cookingsUrl = 'http://localhost:5231/getcookings';\n    this.token = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9uYW1lIjoicmFiQGdtYWlsLmNvbSIsImV4cCI6MTY5MDIwMzI3MiwiaXNzIjoiRW5qb3lpbmdDb29raW5nU2VydmVyIiwiYXVkIjoiRW5qb3lpbmdDb29raW5nQ2xpZW50In0.hYZ1kygUrGYqqa_euJEVQQ67-wkDzUyjtBBe0yhrBgU\";\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + this.token\n      })\n    };\n    this.cookings = [];\n  }\n  getAllCookings() {\n    return this.http.get(this.cookingsUrl);\n  }\n  userSignIn(login, password) {\n    return this.http.post(this.cookingsUrl, {\n      login: login,\n      password: password\n    }, this.httpOptions);\n  }\n  userSignUp(userName, login, password) {\n    return this.http.post(this.cookingsUrl + \"signup\", {\n      userName: userName,\n      login: login,\n      password: password\n    }, this.httpOptions);\n  }\n}\nCookingService.ɵfac = function CookingService_Factory(t) {\n  return new (t || CookingService)(i0.ɵɵinject(i1.HttpClient));\n};\nCookingService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CookingService,\n  factory: CookingService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AAQ9D,OAAM,MAAOC,cAAc;EAS1BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IARhB,gBAAW,GAAG,mCAAmC;IAEzD,UAAK,GAAY,kSAAkS;IAEnT,gBAAW,GAAG;MACbC,OAAO,EAAE,IAAIJ,WAAW,CAAC;QAAE,cAAc,EAAG,kBAAkB;QAAE,eAAe,EAAG,SAAS,GAAG,IAAI,CAACK;MAAK,CAAC;KACxG;IAGF,aAAQ,GAAe,EAAE;EADe;EAGxCC,cAAc;IACb,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAa,IAAI,CAACC,WAAW,CAAC;EACnD;EAEAC,UAAU,CAACC,KAAa,EAAEC,QAAgB;IACzC,OAAO,IAAI,CAACR,IAAI,CAACS,IAAI,CAAC,IAAI,CAACJ,WAAW,EAAE;MAACE,KAAK,EAAEA,KAAK;MAAEC,QAAQ,EAAEA;IAAQ,CAAC,EAAE,IAAI,CAACE,WAAW,CAAC;EAC9F;EACAC,UAAU,CAACC,QAAgB,EAAEL,KAAa,EAAEC,QAAgB;IAC3D,OAAO,IAAI,CAACR,IAAI,CAACS,IAAI,CAAC,IAAI,CAACJ,WAAW,GAAG,QAAQ,EAAE;MAACO,QAAQ,EAAEA,QAAQ;MAAEL,KAAK,EAAEA,KAAK;MAAEC,QAAQ,EAAEA;IAAQ,CAAC,EAAE,IAAI,CAACE,WAAW,CAAC;EAC7H;;AArBYZ,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAe,SAAdf,cAAc;EAAAgB,YAFb;AAAM","names":["HttpHeaders","CookingService","constructor","http","headers","token","getAllCookings","get","cookingsUrl","userSignIn","login","password","post","httpOptions","userSignUp","userName","factory","providedIn"],"sourceRoot":"","sources":["D:\\Pet-projects\\EnjoyingCooking\\enjoying-cooking\\src\\app\\cooking.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { ICooking } from './ICooking';\nimport { IUser } from './IUser';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CookingService {\n private cookingsUrl = 'http://localhost:5231/getcookings';\n\n token : string = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9uYW1lIjoicmFiQGdtYWlsLmNvbSIsImV4cCI6MTY5MDIwMzI3MiwiaXNzIjoiRW5qb3lpbmdDb29raW5nU2VydmVyIiwiYXVkIjoiRW5qb3lpbmdDb29raW5nQ2xpZW50In0.hYZ1kygUrGYqqa_euJEVQQ67-wkDzUyjtBBe0yhrBgU\";\n\n httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type' : 'application/json', 'Authorization' : 'Bearer ' + this.token})\n  };\n\n constructor(private http: HttpClient) { }\n cookings: ICooking[] = [];\n\n getAllCookings(): Observable<ICooking[]>{\n  return this.http.get<ICooking[]>(this.cookingsUrl);\n }\n\n userSignIn(login: string, password: string) {\n  return this.http.post(this.cookingsUrl, {login: login, password: password}, this.httpOptions);\n }\n userSignUp(userName: string, login: string, password: string) {\n  return this.http.post(this.cookingsUrl + \"signup\", {userName: userName, login: login, password: password}, this.httpOptions);\n }\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}